.TH "BME680" 3 "Mon May 11 2020" "Lab10" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BME680
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbme680_field_data\fP"
.br
.RI "Sensor field data structure\&. "
.ti -1c
.RI "struct \fBbme680_calib_data\fP"
.br
.RI "Structure to hold the Calibration data\&. "
.ti -1c
.RI "struct \fBbme680_tph_sett\fP"
.br
.RI "BME680 sensor settings structure which comprises of ODR, over-sampling and filter settings\&. "
.ti -1c
.RI "struct \fBbme680_gas_sett\fP"
.br
.RI "BME680 gas sensor which comprises of gas settings and status parameters\&. "
.ti -1c
.RI "struct \fBbme680_dev\fP"
.br
.RI "BME680 device structure\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int8_t \fBbme680_init\fP (struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is the entry point\&. It reads the chip-id and calibration data from the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_set_regs\fP (const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API writes the given data to the register address of the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_get_regs\fP (uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API reads the data from the given register address of the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_soft_reset\fP (struct \fBbme680_dev\fP *dev)"
.br
.RI "This API performs the soft reset of the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_set_sensor_mode\fP (struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to set the power mode of the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_get_sensor_mode\fP (struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to get the power mode of the sensor\&. "
.ti -1c
.RI "void \fBbme680_set_profile_dur\fP (uint16_t duration, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to set the profile duration of the sensor\&. "
.ti -1c
.RI "void \fBbme680_get_profile_dur\fP (uint16_t *duration, const struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to get the profile duration of the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_get_sensor_data\fP (struct \fBbme680_field_data\fP *data, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API reads the pressure, temperature and humidity and gas data from the sensor, compensates the data and store it in the bme680_data structure instance passed by the user\&. "
.ti -1c
.RI "int8_t \fBbme680_set_sensor_settings\fP (uint16_t desired_settings, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to set the oversampling, filter and T,P,H, gas selection settings in the sensor\&. "
.ti -1c
.RI "int8_t \fBbme680_get_sensor_settings\fP (uint16_t desired_settings, struct \fBbme680_dev\fP *dev)"
.br
.RI "This API is used to get the oversampling, filter and T,P,H, gas selection settings in the sensor\&. "
.in -1c
.SS "Common macros"

.br
 
.in +1c
.ti -1c
.RI "#define \fBINT8_C\fP(x)   S8_C(x)"
.br
.ti -1c
.RI "#define \fBUINT8_C\fP(x)   U8_C(x)"
.br
.ti -1c
.RI "#define \fBINT16_C\fP(x)   S16_C(x)"
.br
.ti -1c
.RI "#define \fBUINT16_C\fP(x)   U16_C(x)"
.br
.ti -1c
.RI "#define \fBINT32_C\fP(x)   S32_C(x)"
.br
.ti -1c
.RI "#define \fBUINT32_C\fP(x)   U32_C(x)"
.br
.ti -1c
.RI "#define \fBINT64_C\fP(x)   S64_C(x)"
.br
.ti -1c
.RI "#define \fBUINT64_C\fP(x)   U64_C(x)"
.br
.in -1c
.SS "C standard macros"

.in +1c
.ti -1c
.RI "enum \fBbme680_intf\fP { \fBBME680_SPI_INTF\fP, \fBBME680_I2C_INTF\fP }"
.br
.RI "Interface selection Enumerations\&. "
.ti -1c
.RI "typedef int8_t(* \fBbme680_com_fptr_t\fP) (uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)"
.br
.ti -1c
.RI "typedef void(* \fBbme680_delay_fptr_t\fP) (uint32_t period)"
.br
.ti -1c
.RI "#define \fBNULL\fP   ((void *) 0)"
.br
.ti -1c
.RI "#define \fBBME680_POLL_PERIOD_MS\fP   \fBUINT8_C\fP(10)"
.br
.ti -1c
.RI "#define \fBBME680_I2C_ADDR_PRIMARY\fP   \fBUINT8_C\fP(0x76)"
.br
.ti -1c
.RI "#define \fBBME680_I2C_ADDR_SECONDARY\fP   \fBUINT8_C\fP(0x77)"
.br
.ti -1c
.RI "#define \fBBME680_CHIP_ID\fP   \fBUINT8_C\fP(0x61)"
.br
.ti -1c
.RI "#define \fBBME680_COEFF_SIZE\fP   \fBUINT8_C\fP(41)"
.br
.ti -1c
.RI "#define \fBBME680_COEFF_ADDR1_LEN\fP   \fBUINT8_C\fP(25)"
.br
.ti -1c
.RI "#define \fBBME680_COEFF_ADDR2_LEN\fP   \fBUINT8_C\fP(16)"
.br
.ti -1c
.RI "#define \fBBME680_FIELD_LENGTH\fP   \fBUINT8_C\fP(15)"
.br
.ti -1c
.RI "#define \fBBME680_FIELD_ADDR_OFFSET\fP   \fBUINT8_C\fP(17)"
.br
.ti -1c
.RI "#define \fBBME680_SOFT_RESET_CMD\fP   \fBUINT8_C\fP(0xb6)"
.br
.ti -1c
.RI "#define \fBBME680_OK\fP   \fBINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_E_NULL_PTR\fP   \fBINT8_C\fP(\-1)"
.br
.ti -1c
.RI "#define \fBBME680_E_COM_FAIL\fP   \fBINT8_C\fP(\-2)"
.br
.ti -1c
.RI "#define \fBBME680_E_DEV_NOT_FOUND\fP   \fBINT8_C\fP(\-3)"
.br
.ti -1c
.RI "#define \fBBME680_E_INVALID_LENGTH\fP   \fBINT8_C\fP(\-4)"
.br
.ti -1c
.RI "#define \fBBME680_W_DEFINE_PWR_MODE\fP   \fBINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_W_NO_NEW_DATA\fP   \fBINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_I_MIN_CORRECTION\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_I_MAX_CORRECTION\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_ADDR_RES_HEAT_VAL_ADDR\fP   \fBUINT8_C\fP(0x00)"
.br
.ti -1c
.RI "#define \fBBME680_ADDR_RES_HEAT_RANGE_ADDR\fP   \fBUINT8_C\fP(0x02)"
.br
.ti -1c
.RI "#define \fBBME680_ADDR_RANGE_SW_ERR_ADDR\fP   \fBUINT8_C\fP(0x04)"
.br
.ti -1c
.RI "#define \fBBME680_ADDR_SENS_CONF_START\fP   \fBUINT8_C\fP(0x5A)"
.br
.ti -1c
.RI "#define \fBBME680_ADDR_GAS_CONF_START\fP   \fBUINT8_C\fP(0x64)"
.br
.ti -1c
.RI "#define \fBBME680_FIELD0_ADDR\fP   \fBUINT8_C\fP(0x1d)"
.br
.ti -1c
.RI "#define \fBBME680_RES_HEAT0_ADDR\fP   \fBUINT8_C\fP(0x5a)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_WAIT0_ADDR\fP   \fBUINT8_C\fP(0x64)"
.br
.ti -1c
.RI "#define \fBBME680_CONF_HEAT_CTRL_ADDR\fP   \fBUINT8_C\fP(0x70)"
.br
.ti -1c
.RI "#define \fBBME680_CONF_ODR_RUN_GAS_NBC_ADDR\fP   \fBUINT8_C\fP(0x71)"
.br
.ti -1c
.RI "#define \fBBME680_CONF_OS_H_ADDR\fP   \fBUINT8_C\fP(0x72)"
.br
.ti -1c
.RI "#define \fBBME680_MEM_PAGE_ADDR\fP   \fBUINT8_C\fP(0xf3)"
.br
.ti -1c
.RI "#define \fBBME680_CONF_T_P_MODE_ADDR\fP   \fBUINT8_C\fP(0x74)"
.br
.ti -1c
.RI "#define \fBBME680_CONF_ODR_FILT_ADDR\fP   \fBUINT8_C\fP(0x75)"
.br
.ti -1c
.RI "#define \fBBME680_COEFF_ADDR1\fP   \fBUINT8_C\fP(0x89)"
.br
.ti -1c
.RI "#define \fBBME680_COEFF_ADDR2\fP   \fBUINT8_C\fP(0xe1)"
.br
.ti -1c
.RI "#define \fBBME680_CHIP_ID_ADDR\fP   \fBUINT8_C\fP(0xd0)"
.br
.ti -1c
.RI "#define \fBBME680_SOFT_RESET_ADDR\fP   \fBUINT8_C\fP(0xe0)"
.br
.ti -1c
.RI "#define \fBBME680_ENABLE_HEATER\fP   \fBUINT8_C\fP(0x00)"
.br
.ti -1c
.RI "#define \fBBME680_DISABLE_HEATER\fP   \fBUINT8_C\fP(0x08)"
.br
.ti -1c
.RI "#define \fBBME680_DISABLE_GAS_MEAS\fP   \fBUINT8_C\fP(0x00)"
.br
.ti -1c
.RI "#define \fBBME680_ENABLE_GAS_MEAS\fP   \fBUINT8_C\fP(0x01)"
.br
.ti -1c
.RI "#define \fBBME680_OS_NONE\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_OS_1X\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_OS_2X\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_OS_4X\fP   \fBUINT8_C\fP(3)"
.br
.ti -1c
.RI "#define \fBBME680_OS_8X\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_OS_16X\fP   \fBUINT8_C\fP(5)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_0\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_1\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_3\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_7\fP   \fBUINT8_C\fP(3)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_15\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_31\fP   \fBUINT8_C\fP(5)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_63\fP   \fBUINT8_C\fP(6)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SIZE_127\fP   \fBUINT8_C\fP(7)"
.br
.ti -1c
.RI "#define \fBBME680_SLEEP_MODE\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_FORCED_MODE\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_RESET_PERIOD\fP   \fBUINT32_C\fP(10)"
.br
.ti -1c
.RI "#define \fBBME680_MEM_PAGE0\fP   \fBUINT8_C\fP(0x10)"
.br
.ti -1c
.RI "#define \fBBME680_MEM_PAGE1\fP   \fBUINT8_C\fP(0x00)"
.br
.ti -1c
.RI "#define \fBBME680_HUM_REG_SHIFT_VAL\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_RUN_GAS_DISABLE\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_RUN_GAS_ENABLE\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_TMP_BUFFER_LENGTH\fP   \fBUINT8_C\fP(40)"
.br
.ti -1c
.RI "#define \fBBME680_REG_BUFFER_LENGTH\fP   \fBUINT8_C\fP(6)"
.br
.ti -1c
.RI "#define \fBBME680_FIELD_DATA_LENGTH\fP   \fBUINT8_C\fP(3)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_REG_BUF_LENGTH\fP   \fBUINT8_C\fP(20)"
.br
.ti -1c
.RI "#define \fBBME680_OST_SEL\fP   \fBUINT16_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_OSP_SEL\fP   \fBUINT16_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_OSH_SEL\fP   \fBUINT16_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_MEAS_SEL\fP   \fBUINT16_C\fP(8)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_SEL\fP   \fBUINT16_C\fP(16)"
.br
.ti -1c
.RI "#define \fBBME680_HCNTRL_SEL\fP   \fBUINT16_C\fP(32)"
.br
.ti -1c
.RI "#define \fBBME680_RUN_GAS_SEL\fP   \fBUINT16_C\fP(64)"
.br
.ti -1c
.RI "#define \fBBME680_NBCONV_SEL\fP   \fBUINT16_C\fP(128)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_SENSOR_SEL\fP   (\fBBME680_GAS_MEAS_SEL\fP | \fBBME680_RUN_GAS_SEL\fP | \fBBME680_NBCONV_SEL\fP)"
.br
.ti -1c
.RI "#define \fBBME680_NBCONV_MIN\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_NBCONV_MAX\fP   \fBUINT8_C\fP(10)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_MEAS_MSK\fP   \fBUINT8_C\fP(0x30)"
.br
.ti -1c
.RI "#define \fBBME680_NBCONV_MSK\fP   \fBUINT8_C\fP(0X0F)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_MSK\fP   \fBUINT8_C\fP(0X1C)"
.br
.ti -1c
.RI "#define \fBBME680_OST_MSK\fP   \fBUINT8_C\fP(0XE0)"
.br
.ti -1c
.RI "#define \fBBME680_OSP_MSK\fP   \fBUINT8_C\fP(0X1C)"
.br
.ti -1c
.RI "#define \fBBME680_OSH_MSK\fP   \fBUINT8_C\fP(0X07)"
.br
.ti -1c
.RI "#define \fBBME680_HCTRL_MSK\fP   \fBUINT8_C\fP(0x08)"
.br
.ti -1c
.RI "#define \fBBME680_RUN_GAS_MSK\fP   \fBUINT8_C\fP(0x10)"
.br
.ti -1c
.RI "#define \fBBME680_MODE_MSK\fP   \fBUINT8_C\fP(0x03)"
.br
.ti -1c
.RI "#define \fBBME680_RHRANGE_MSK\fP   \fBUINT8_C\fP(0x30)"
.br
.ti -1c
.RI "#define \fBBME680_RSERROR_MSK\fP   \fBUINT8_C\fP(0xf0)"
.br
.ti -1c
.RI "#define \fBBME680_NEW_DATA_MSK\fP   \fBUINT8_C\fP(0x80)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_INDEX_MSK\fP   \fBUINT8_C\fP(0x0f)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_RANGE_MSK\fP   \fBUINT8_C\fP(0x0f)"
.br
.ti -1c
.RI "#define \fBBME680_GASM_VALID_MSK\fP   \fBUINT8_C\fP(0x20)"
.br
.ti -1c
.RI "#define \fBBME680_HEAT_STAB_MSK\fP   \fBUINT8_C\fP(0x10)"
.br
.ti -1c
.RI "#define \fBBME680_MEM_PAGE_MSK\fP   \fBUINT8_C\fP(0x10)"
.br
.ti -1c
.RI "#define \fBBME680_SPI_RD_MSK\fP   \fBUINT8_C\fP(0x80)"
.br
.ti -1c
.RI "#define \fBBME680_SPI_WR_MSK\fP   \fBUINT8_C\fP(0x7f)"
.br
.ti -1c
.RI "#define \fBBME680_BIT_H1_DATA_MSK\fP   \fBUINT8_C\fP(0x0F)"
.br
.ti -1c
.RI "#define \fBBME680_GAS_MEAS_POS\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_FILTER_POS\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_OST_POS\fP   \fBUINT8_C\fP(5)"
.br
.ti -1c
.RI "#define \fBBME680_OSP_POS\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_RUN_GAS_POS\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_T2_LSB_REG\fP   (1)"
.br
.ti -1c
.RI "#define \fBBME680_T2_MSB_REG\fP   (2)"
.br
.ti -1c
.RI "#define \fBBME680_T3_REG\fP   (3)"
.br
.ti -1c
.RI "#define \fBBME680_P1_LSB_REG\fP   (5)"
.br
.ti -1c
.RI "#define \fBBME680_P1_MSB_REG\fP   (6)"
.br
.ti -1c
.RI "#define \fBBME680_P2_LSB_REG\fP   (7)"
.br
.ti -1c
.RI "#define \fBBME680_P2_MSB_REG\fP   (8)"
.br
.ti -1c
.RI "#define \fBBME680_P3_REG\fP   (9)"
.br
.ti -1c
.RI "#define \fBBME680_P4_LSB_REG\fP   (11)"
.br
.ti -1c
.RI "#define \fBBME680_P4_MSB_REG\fP   (12)"
.br
.ti -1c
.RI "#define \fBBME680_P5_LSB_REG\fP   (13)"
.br
.ti -1c
.RI "#define \fBBME680_P5_MSB_REG\fP   (14)"
.br
.ti -1c
.RI "#define \fBBME680_P7_REG\fP   (15)"
.br
.ti -1c
.RI "#define \fBBME680_P6_REG\fP   (16)"
.br
.ti -1c
.RI "#define \fBBME680_P8_LSB_REG\fP   (19)"
.br
.ti -1c
.RI "#define \fBBME680_P8_MSB_REG\fP   (20)"
.br
.ti -1c
.RI "#define \fBBME680_P9_LSB_REG\fP   (21)"
.br
.ti -1c
.RI "#define \fBBME680_P9_MSB_REG\fP   (22)"
.br
.ti -1c
.RI "#define \fBBME680_P10_REG\fP   (23)"
.br
.ti -1c
.RI "#define \fBBME680_H2_MSB_REG\fP   (25)"
.br
.ti -1c
.RI "#define \fBBME680_H2_LSB_REG\fP   (26)"
.br
.ti -1c
.RI "#define \fBBME680_H1_LSB_REG\fP   (26)"
.br
.ti -1c
.RI "#define \fBBME680_H1_MSB_REG\fP   (27)"
.br
.ti -1c
.RI "#define \fBBME680_H3_REG\fP   (28)"
.br
.ti -1c
.RI "#define \fBBME680_H4_REG\fP   (29)"
.br
.ti -1c
.RI "#define \fBBME680_H5_REG\fP   (30)"
.br
.ti -1c
.RI "#define \fBBME680_H6_REG\fP   (31)"
.br
.ti -1c
.RI "#define \fBBME680_H7_REG\fP   (32)"
.br
.ti -1c
.RI "#define \fBBME680_T1_LSB_REG\fP   (33)"
.br
.ti -1c
.RI "#define \fBBME680_T1_MSB_REG\fP   (34)"
.br
.ti -1c
.RI "#define \fBBME680_GH2_LSB_REG\fP   (35)"
.br
.ti -1c
.RI "#define \fBBME680_GH2_MSB_REG\fP   (36)"
.br
.ti -1c
.RI "#define \fBBME680_GH1_REG\fP   (37)"
.br
.ti -1c
.RI "#define \fBBME680_GH3_REG\fP   (38)"
.br
.ti -1c
.RI "#define \fBBME680_REG_FILTER_INDEX\fP   \fBUINT8_C\fP(5)"
.br
.ti -1c
.RI "#define \fBBME680_REG_TEMP_INDEX\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_REG_PRES_INDEX\fP   \fBUINT8_C\fP(4)"
.br
.ti -1c
.RI "#define \fBBME680_REG_HUM_INDEX\fP   \fBUINT8_C\fP(2)"
.br
.ti -1c
.RI "#define \fBBME680_REG_NBCONV_INDEX\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_REG_RUN_GAS_INDEX\fP   \fBUINT8_C\fP(1)"
.br
.ti -1c
.RI "#define \fBBME680_REG_HCTRL_INDEX\fP   \fBUINT8_C\fP(0)"
.br
.ti -1c
.RI "#define \fBBME680_MAX_OVERFLOW_VAL\fP   \fBINT32_C\fP(0x40000000)"
.br
.ti -1c
.RI "#define \fBBME680_CONCAT_BYTES\fP(msb,  lsb)   (((uint16_t)msb << 8) | (uint16_t)lsb)"
.br
.ti -1c
.RI "#define \fBBME680_SET_BITS\fP(reg_data,  bitname,  data)"
.br
.ti -1c
.RI "#define \fBBME680_GET_BITS\fP(reg_data,  bitname)"
.br
.ti -1c
.RI "#define \fBBME680_SET_BITS_POS_0\fP(reg_data,  bitname,  data)"
.br
.ti -1c
.RI "#define \fBBME680_GET_BITS_POS_0\fP(reg_data,  bitname)   (reg_data & (bitname##_MSK))"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Macro Definition Documentation"
.PP 
.SS "#define BME680_ADDR_GAS_CONF_START   \fBUINT8_C\fP(0x64)"

.PP
Definition at line 153 of file bme680_defs\&.h\&.
.SS "#define BME680_ADDR_RANGE_SW_ERR_ADDR   \fBUINT8_C\fP(0x04)"

.PP
Definition at line 151 of file bme680_defs\&.h\&.
.SS "#define BME680_ADDR_RES_HEAT_RANGE_ADDR   \fBUINT8_C\fP(0x02)"

.PP
Definition at line 150 of file bme680_defs\&.h\&.
.SS "#define BME680_ADDR_RES_HEAT_VAL_ADDR   \fBUINT8_C\fP(0x00)"
Register map Other coefficient's address 
.PP
Definition at line 149 of file bme680_defs\&.h\&.
.SS "#define BME680_ADDR_SENS_CONF_START   \fBUINT8_C\fP(0x5A)"

.PP
Definition at line 152 of file bme680_defs\&.h\&.
.SS "#define BME680_BIT_H1_DATA_MSK   \fBUINT8_C\fP(0x0F)"

.PP
Definition at line 265 of file bme680_defs\&.h\&.
.SS "#define BME680_CHIP_ID   \fBUINT8_C\fP(0x61)"
BME680 unique chip identifier 
.PP
Definition at line 117 of file bme680_defs\&.h\&.
.SS "#define BME680_CHIP_ID_ADDR   \fBUINT8_C\fP(0xd0)"
Chip identifier 
.PP
Definition at line 175 of file bme680_defs\&.h\&.
.SS "#define BME680_COEFF_ADDR1   \fBUINT8_C\fP(0x89)"
Coefficient's address 
.PP
Definition at line 171 of file bme680_defs\&.h\&.
.SS "#define BME680_COEFF_ADDR1_LEN   \fBUINT8_C\fP(25)"

.PP
Definition at line 121 of file bme680_defs\&.h\&.
.SS "#define BME680_COEFF_ADDR2   \fBUINT8_C\fP(0xe1)"

.PP
Definition at line 172 of file bme680_defs\&.h\&.
.SS "#define BME680_COEFF_ADDR2_LEN   \fBUINT8_C\fP(16)"

.PP
Definition at line 122 of file bme680_defs\&.h\&.
.SS "#define BME680_COEFF_SIZE   \fBUINT8_C\fP(41)"
BME680 coefficients related defines 
.PP
Definition at line 120 of file bme680_defs\&.h\&.
.SS "#define BME680_CONCAT_BYTES(msb, lsb)   (((uint16_t)msb << 8) | (uint16_t)lsb)"
Macro to combine two 8 bit data's to form a 16 bit data 
.PP
Definition at line 328 of file bme680_defs\&.h\&.
.SS "#define BME680_CONF_HEAT_CTRL_ADDR   \fBUINT8_C\fP(0x70)"
Sensor configuration registers 
.PP
Definition at line 163 of file bme680_defs\&.h\&.
.SS "#define BME680_CONF_ODR_FILT_ADDR   \fBUINT8_C\fP(0x75)"

.PP
Definition at line 168 of file bme680_defs\&.h\&.
.SS "#define BME680_CONF_ODR_RUN_GAS_NBC_ADDR   \fBUINT8_C\fP(0x71)"

.PP
Definition at line 164 of file bme680_defs\&.h\&.
.SS "#define BME680_CONF_OS_H_ADDR   \fBUINT8_C\fP(0x72)"

.PP
Definition at line 165 of file bme680_defs\&.h\&.
.SS "#define BME680_CONF_T_P_MODE_ADDR   \fBUINT8_C\fP(0x74)"

.PP
Definition at line 167 of file bme680_defs\&.h\&.
.SS "#define BME680_DISABLE_GAS_MEAS   \fBUINT8_C\fP(0x00)"
Gas measurement settings 
.PP
Definition at line 185 of file bme680_defs\&.h\&.
.SS "#define BME680_DISABLE_HEATER   \fBUINT8_C\fP(0x08)"

.PP
Definition at line 182 of file bme680_defs\&.h\&.
.SS "#define BME680_E_COM_FAIL   \fBINT8_C\fP(\-2)"

.PP
Definition at line 135 of file bme680_defs\&.h\&.
.SS "#define BME680_E_DEV_NOT_FOUND   \fBINT8_C\fP(\-3)"

.PP
Definition at line 136 of file bme680_defs\&.h\&.
.SS "#define BME680_E_INVALID_LENGTH   \fBINT8_C\fP(\-4)"

.PP
Definition at line 137 of file bme680_defs\&.h\&.
.SS "#define BME680_E_NULL_PTR   \fBINT8_C\fP(\-1)"

.PP
Definition at line 134 of file bme680_defs\&.h\&.
.SS "#define BME680_ENABLE_GAS_MEAS   \fBUINT8_C\fP(0x01)"

.PP
Definition at line 186 of file bme680_defs\&.h\&.
.SS "#define BME680_ENABLE_HEATER   \fBUINT8_C\fP(0x00)"
Heater control settings 
.PP
Definition at line 181 of file bme680_defs\&.h\&.
.SS "#define BME680_FIELD0_ADDR   \fBUINT8_C\fP(0x1d)"
Field settings 
.PP
Definition at line 156 of file bme680_defs\&.h\&.
.SS "#define BME680_FIELD_ADDR_OFFSET   \fBUINT8_C\fP(17)"

.PP
Definition at line 126 of file bme680_defs\&.h\&.
.SS "#define BME680_FIELD_DATA_LENGTH   \fBUINT8_C\fP(3)"

.PP
Definition at line 227 of file bme680_defs\&.h\&.
.SS "#define BME680_FIELD_LENGTH   \fBUINT8_C\fP(15)"
BME680 field_x related defines 
.PP
Definition at line 125 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_MSK   \fBUINT8_C\fP(0X1C)"

.PP
Definition at line 248 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_POS   \fBUINT8_C\fP(2)"

.PP
Definition at line 269 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SEL   \fBUINT16_C\fP(16)"

.PP
Definition at line 235 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_0   \fBUINT8_C\fP(0)"
IIR filter settings 
.PP
Definition at line 197 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_1   \fBUINT8_C\fP(1)"

.PP
Definition at line 198 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_127   \fBUINT8_C\fP(7)"

.PP
Definition at line 204 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_15   \fBUINT8_C\fP(4)"

.PP
Definition at line 201 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_3   \fBUINT8_C\fP(2)"

.PP
Definition at line 199 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_31   \fBUINT8_C\fP(5)"

.PP
Definition at line 202 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_63   \fBUINT8_C\fP(6)"

.PP
Definition at line 203 of file bme680_defs\&.h\&.
.SS "#define BME680_FILTER_SIZE_7   \fBUINT8_C\fP(3)"

.PP
Definition at line 200 of file bme680_defs\&.h\&.
.SS "#define BME680_FORCED_MODE   \fBUINT8_C\fP(1)"

.PP
Definition at line 208 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_INDEX_MSK   \fBUINT8_C\fP(0x0f)"

.PP
Definition at line 258 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_MEAS_MSK   \fBUINT8_C\fP(0x30)"
Mask definitions 
.PP
Definition at line 246 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_MEAS_POS   \fBUINT8_C\fP(4)"
Bit position definitions for sensor settings 
.PP
Definition at line 268 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_MEAS_SEL   \fBUINT16_C\fP(8)"

.PP
Definition at line 234 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_RANGE_MSK   \fBUINT8_C\fP(0x0f)"

.PP
Definition at line 259 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_REG_BUF_LENGTH   \fBUINT8_C\fP(20)"

.PP
Definition at line 228 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_SENSOR_SEL   (\fBBME680_GAS_MEAS_SEL\fP | \fBBME680_RUN_GAS_SEL\fP | \fBBME680_NBCONV_SEL\fP)"

.PP
Definition at line 239 of file bme680_defs\&.h\&.
.SS "#define BME680_GAS_WAIT0_ADDR   \fBUINT8_C\fP(0x64)"

.PP
Definition at line 160 of file bme680_defs\&.h\&.
.SS "#define BME680_GASM_VALID_MSK   \fBUINT8_C\fP(0x20)"

.PP
Definition at line 260 of file bme680_defs\&.h\&.
.SS "#define BME680_GET_BITS(reg_data, bitname)"
\fBValue:\fP
.PP
.nf
    ((reg_data & (bitname##_MSK)) >> \
    (bitname##_POS))
.fi
.PP
Definition at line 334 of file bme680_defs\&.h\&.
.SS "#define BME680_GET_BITS_POS_0(reg_data, bitname)   (reg_data & (bitname##_MSK))"

.PP
Definition at line 341 of file bme680_defs\&.h\&.
.SS "#define BME680_GH1_REG   (37)"

.PP
Definition at line 307 of file bme680_defs\&.h\&.
.SS "#define BME680_GH2_LSB_REG   (35)"

.PP
Definition at line 305 of file bme680_defs\&.h\&.
.SS "#define BME680_GH2_MSB_REG   (36)"

.PP
Definition at line 306 of file bme680_defs\&.h\&.
.SS "#define BME680_GH3_REG   (38)"

.PP
Definition at line 308 of file bme680_defs\&.h\&.
.SS "#define BME680_H1_LSB_REG   (26)"

.PP
Definition at line 296 of file bme680_defs\&.h\&.
.SS "#define BME680_H1_MSB_REG   (27)"

.PP
Definition at line 297 of file bme680_defs\&.h\&.
.SS "#define BME680_H2_LSB_REG   (26)"

.PP
Definition at line 295 of file bme680_defs\&.h\&.
.SS "#define BME680_H2_MSB_REG   (25)"

.PP
Definition at line 294 of file bme680_defs\&.h\&.
.SS "#define BME680_H3_REG   (28)"

.PP
Definition at line 298 of file bme680_defs\&.h\&.
.SS "#define BME680_H4_REG   (29)"

.PP
Definition at line 299 of file bme680_defs\&.h\&.
.SS "#define BME680_H5_REG   (30)"

.PP
Definition at line 300 of file bme680_defs\&.h\&.
.SS "#define BME680_H6_REG   (31)"

.PP
Definition at line 301 of file bme680_defs\&.h\&.
.SS "#define BME680_H7_REG   (32)"

.PP
Definition at line 302 of file bme680_defs\&.h\&.
.SS "#define BME680_HCNTRL_SEL   \fBUINT16_C\fP(32)"

.PP
Definition at line 236 of file bme680_defs\&.h\&.
.SS "#define BME680_HCTRL_MSK   \fBUINT8_C\fP(0x08)"

.PP
Definition at line 252 of file bme680_defs\&.h\&.
.SS "#define BME680_HEAT_STAB_MSK   \fBUINT8_C\fP(0x10)"

.PP
Definition at line 261 of file bme680_defs\&.h\&.
.SS "#define BME680_HUM_REG_SHIFT_VAL   \fBUINT8_C\fP(4)"
Ambient humidity shift value for compensation 
.PP
Definition at line 218 of file bme680_defs\&.h\&.
.SS "#define BME680_I2C_ADDR_PRIMARY   \fBUINT8_C\fP(0x76)"
BME680 I2C addresses 
.PP
Definition at line 113 of file bme680_defs\&.h\&.
.SS "#define BME680_I2C_ADDR_SECONDARY   \fBUINT8_C\fP(0x77)"

.PP
Definition at line 114 of file bme680_defs\&.h\&.
.SS "#define BME680_I_MAX_CORRECTION   \fBUINT8_C\fP(2)"

.PP
Definition at line 145 of file bme680_defs\&.h\&.
.SS "#define BME680_I_MIN_CORRECTION   \fBUINT8_C\fP(1)"

.PP
Definition at line 144 of file bme680_defs\&.h\&.
.SS "#define BME680_MAX_OVERFLOW_VAL   \fBINT32_C\fP(0x40000000)"
BME680 pressure calculation macros
.PP
This max value is used to provide precedence to multiplication or division in pressure compensation equation to achieve least loss of precision and avoiding overflows\&. i\&.e Comparing value, BME680_MAX_OVERFLOW_VAL = \fBINT32_C(1 << 30)\fP 
.PP
Definition at line 325 of file bme680_defs\&.h\&.
.SS "#define BME680_MEM_PAGE0   \fBUINT8_C\fP(0x10)"
SPI memory page settings 
.PP
Definition at line 214 of file bme680_defs\&.h\&.
.SS "#define BME680_MEM_PAGE1   \fBUINT8_C\fP(0x00)"

.PP
Definition at line 215 of file bme680_defs\&.h\&.
.SS "#define BME680_MEM_PAGE_ADDR   \fBUINT8_C\fP(0xf3)"

.PP
Definition at line 166 of file bme680_defs\&.h\&.
.SS "#define BME680_MEM_PAGE_MSK   \fBUINT8_C\fP(0x10)"

.PP
Definition at line 262 of file bme680_defs\&.h\&.
.SS "#define BME680_MODE_MSK   \fBUINT8_C\fP(0x03)"

.PP
Definition at line 254 of file bme680_defs\&.h\&.
.SS "#define BME680_NBCONV_MAX   \fBUINT8_C\fP(10)"

.PP
Definition at line 243 of file bme680_defs\&.h\&.
.SS "#define BME680_NBCONV_MIN   \fBUINT8_C\fP(0)"
Number of conversion settings 
.PP
Definition at line 242 of file bme680_defs\&.h\&.
.SS "#define BME680_NBCONV_MSK   \fBUINT8_C\fP(0X0F)"

.PP
Definition at line 247 of file bme680_defs\&.h\&.
.SS "#define BME680_NBCONV_SEL   \fBUINT16_C\fP(128)"

.PP
Definition at line 238 of file bme680_defs\&.h\&.
.SS "#define BME680_NEW_DATA_MSK   \fBUINT8_C\fP(0x80)"

.PP
Definition at line 257 of file bme680_defs\&.h\&.
.SS "#define BME680_OK   \fBINT8_C\fP(0)"
Error code definitions 
.PP
Definition at line 132 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_16X   \fBUINT8_C\fP(5)"

.PP
Definition at line 194 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_1X   \fBUINT8_C\fP(1)"

.PP
Definition at line 190 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_2X   \fBUINT8_C\fP(2)"

.PP
Definition at line 191 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_4X   \fBUINT8_C\fP(3)"

.PP
Definition at line 192 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_8X   \fBUINT8_C\fP(4)"

.PP
Definition at line 193 of file bme680_defs\&.h\&.
.SS "#define BME680_OS_NONE   \fBUINT8_C\fP(0)"
Over-sampling settings 
.PP
Definition at line 189 of file bme680_defs\&.h\&.
.SS "#define BME680_OSH_MSK   \fBUINT8_C\fP(0X07)"

.PP
Definition at line 251 of file bme680_defs\&.h\&.
.SS "#define BME680_OSH_SEL   \fBUINT16_C\fP(4)"

.PP
Definition at line 233 of file bme680_defs\&.h\&.
.SS "#define BME680_OSP_MSK   \fBUINT8_C\fP(0X1C)"

.PP
Definition at line 250 of file bme680_defs\&.h\&.
.SS "#define BME680_OSP_POS   \fBUINT8_C\fP(2)"

.PP
Definition at line 271 of file bme680_defs\&.h\&.
.SS "#define BME680_OSP_SEL   \fBUINT16_C\fP(2)"

.PP
Definition at line 232 of file bme680_defs\&.h\&.
.SS "#define BME680_OST_MSK   \fBUINT8_C\fP(0XE0)"

.PP
Definition at line 249 of file bme680_defs\&.h\&.
.SS "#define BME680_OST_POS   \fBUINT8_C\fP(5)"

.PP
Definition at line 270 of file bme680_defs\&.h\&.
.SS "#define BME680_OST_SEL   \fBUINT16_C\fP(1)"
Settings selector 
.PP
Definition at line 231 of file bme680_defs\&.h\&.
.SS "#define BME680_P10_REG   (23)"

.PP
Definition at line 293 of file bme680_defs\&.h\&.
.SS "#define BME680_P1_LSB_REG   (5)"

.PP
Definition at line 278 of file bme680_defs\&.h\&.
.SS "#define BME680_P1_MSB_REG   (6)"

.PP
Definition at line 279 of file bme680_defs\&.h\&.
.SS "#define BME680_P2_LSB_REG   (7)"

.PP
Definition at line 280 of file bme680_defs\&.h\&.
.SS "#define BME680_P2_MSB_REG   (8)"

.PP
Definition at line 281 of file bme680_defs\&.h\&.
.SS "#define BME680_P3_REG   (9)"

.PP
Definition at line 282 of file bme680_defs\&.h\&.
.SS "#define BME680_P4_LSB_REG   (11)"

.PP
Definition at line 283 of file bme680_defs\&.h\&.
.SS "#define BME680_P4_MSB_REG   (12)"

.PP
Definition at line 284 of file bme680_defs\&.h\&.
.SS "#define BME680_P5_LSB_REG   (13)"

.PP
Definition at line 285 of file bme680_defs\&.h\&.
.SS "#define BME680_P5_MSB_REG   (14)"

.PP
Definition at line 286 of file bme680_defs\&.h\&.
.SS "#define BME680_P6_REG   (16)"

.PP
Definition at line 288 of file bme680_defs\&.h\&.
.SS "#define BME680_P7_REG   (15)"

.PP
Definition at line 287 of file bme680_defs\&.h\&.
.SS "#define BME680_P8_LSB_REG   (19)"

.PP
Definition at line 289 of file bme680_defs\&.h\&.
.SS "#define BME680_P8_MSB_REG   (20)"

.PP
Definition at line 290 of file bme680_defs\&.h\&.
.SS "#define BME680_P9_LSB_REG   (21)"

.PP
Definition at line 291 of file bme680_defs\&.h\&.
.SS "#define BME680_P9_MSB_REG   (22)"

.PP
Definition at line 292 of file bme680_defs\&.h\&.
.SS "#define BME680_POLL_PERIOD_MS   \fBUINT8_C\fP(10)"
BME680 configuration macros Enable or un-comment the macro to provide floating point data output BME680 General config 
.PP
Definition at line 110 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_BUFFER_LENGTH   \fBUINT8_C\fP(6)"

.PP
Definition at line 226 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_FILTER_INDEX   \fBUINT8_C\fP(5)"
BME680 register buffer index settings 
.PP
Definition at line 311 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_HCTRL_INDEX   \fBUINT8_C\fP(0)"

.PP
Definition at line 317 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_HUM_INDEX   \fBUINT8_C\fP(2)"

.PP
Definition at line 314 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_NBCONV_INDEX   \fBUINT8_C\fP(1)"

.PP
Definition at line 315 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_PRES_INDEX   \fBUINT8_C\fP(4)"

.PP
Definition at line 313 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_RUN_GAS_INDEX   \fBUINT8_C\fP(1)"

.PP
Definition at line 316 of file bme680_defs\&.h\&.
.SS "#define BME680_REG_TEMP_INDEX   \fBUINT8_C\fP(4)"

.PP
Definition at line 312 of file bme680_defs\&.h\&.
.SS "#define BME680_RES_HEAT0_ADDR   \fBUINT8_C\fP(0x5a)"
Heater settings 
.PP
Definition at line 159 of file bme680_defs\&.h\&.
.SS "#define BME680_RESET_PERIOD   \fBUINT32_C\fP(10)"
Delay related macro declaration 
.PP
Definition at line 211 of file bme680_defs\&.h\&.
.SS "#define BME680_RHRANGE_MSK   \fBUINT8_C\fP(0x30)"

.PP
Definition at line 255 of file bme680_defs\&.h\&.
.SS "#define BME680_RSERROR_MSK   \fBUINT8_C\fP(0xf0)"

.PP
Definition at line 256 of file bme680_defs\&.h\&.
.SS "#define BME680_RUN_GAS_DISABLE   \fBUINT8_C\fP(0)"
Run gas enable and disable settings 
.PP
Definition at line 221 of file bme680_defs\&.h\&.
.SS "#define BME680_RUN_GAS_ENABLE   \fBUINT8_C\fP(1)"

.PP
Definition at line 222 of file bme680_defs\&.h\&.
.SS "#define BME680_RUN_GAS_MSK   \fBUINT8_C\fP(0x10)"

.PP
Definition at line 253 of file bme680_defs\&.h\&.
.SS "#define BME680_RUN_GAS_POS   \fBUINT8_C\fP(4)"

.PP
Definition at line 272 of file bme680_defs\&.h\&.
.SS "#define BME680_RUN_GAS_SEL   \fBUINT16_C\fP(64)"

.PP
Definition at line 237 of file bme680_defs\&.h\&.
.SS "#define BME680_SET_BITS(reg_data, bitname, data)"
\fBValue:\fP
.PP
.nf
       ((reg_data & ~(bitname##_MSK)) | \
        ((data << bitname##_POS) & bitname##_MSK))
.fi
Macro to SET and GET BITS of a register 
.PP
Definition at line 331 of file bme680_defs\&.h\&.
.SS "#define BME680_SET_BITS_POS_0(reg_data, bitname, data)"
\fBValue:\fP
.PP
.nf
               ((reg_data & ~(bitname##_MSK)) | \
                (data & bitname##_MSK))
.fi
Macro variant to handle the bitname position if it is zero 
.PP
Definition at line 338 of file bme680_defs\&.h\&.
.SS "#define BME680_SLEEP_MODE   \fBUINT8_C\fP(0)"
Power mode settings 
.PP
Definition at line 207 of file bme680_defs\&.h\&.
.SS "#define BME680_SOFT_RESET_ADDR   \fBUINT8_C\fP(0xe0)"
Soft reset register 
.PP
Definition at line 178 of file bme680_defs\&.h\&.
.SS "#define BME680_SOFT_RESET_CMD   \fBUINT8_C\fP(0xb6)"
Soft reset command 
.PP
Definition at line 129 of file bme680_defs\&.h\&.
.SS "#define BME680_SPI_RD_MSK   \fBUINT8_C\fP(0x80)"

.PP
Definition at line 263 of file bme680_defs\&.h\&.
.SS "#define BME680_SPI_WR_MSK   \fBUINT8_C\fP(0x7f)"

.PP
Definition at line 264 of file bme680_defs\&.h\&.
.SS "#define BME680_T1_LSB_REG   (33)"

.PP
Definition at line 303 of file bme680_defs\&.h\&.
.SS "#define BME680_T1_MSB_REG   (34)"

.PP
Definition at line 304 of file bme680_defs\&.h\&.
.SS "#define BME680_T2_LSB_REG   (1)"
Array Index to Field data mapping for Calibration Data 
.PP
Definition at line 275 of file bme680_defs\&.h\&.
.SS "#define BME680_T2_MSB_REG   (2)"

.PP
Definition at line 276 of file bme680_defs\&.h\&.
.SS "#define BME680_T3_REG   (3)"

.PP
Definition at line 277 of file bme680_defs\&.h\&.
.SS "#define BME680_TMP_BUFFER_LENGTH   \fBUINT8_C\fP(40)"
Buffer length macro declaration 
.PP
Definition at line 225 of file bme680_defs\&.h\&.
.SS "#define BME680_W_DEFINE_PWR_MODE   \fBINT8_C\fP(1)"

.PP
Definition at line 140 of file bme680_defs\&.h\&.
.SS "#define BME680_W_NO_NEW_DATA   \fBINT8_C\fP(2)"

.PP
Definition at line 141 of file bme680_defs\&.h\&.
.SS "#define INT16_C(x)   S16_C(x)"

.PP
Definition at line 78 of file bme680_defs\&.h\&.
.SS "#define INT32_C(x)   S32_C(x)"

.PP
Definition at line 83 of file bme680_defs\&.h\&.
.SS "#define INT64_C(x)   S64_C(x)"

.PP
Definition at line 88 of file bme680_defs\&.h\&.
.SS "#define INT8_C(x)   S8_C(x)"

.PP
Definition at line 73 of file bme680_defs\&.h\&.
.SS "#define NULL   ((void *) 0)"

.PP
Definition at line 99 of file bme680_defs\&.h\&.
.SS "#define UINT16_C(x)   U16_C(x)"

.PP
Definition at line 79 of file bme680_defs\&.h\&.
.SS "#define UINT32_C(x)   U32_C(x)"

.PP
Definition at line 84 of file bme680_defs\&.h\&.
.SS "#define UINT64_C(x)   U64_C(x)"

.PP
Definition at line 89 of file bme680_defs\&.h\&.
.SS "#define UINT8_C(x)   U8_C(x)"

.PP
Definition at line 74 of file bme680_defs\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef int8_t(* bme680_com_fptr_t) (uint8_t dev_id, uint8_t reg_addr, uint8_t *data, uint16_t len)"
Type definitions
.PP
Generic communication function pointer 
.PP
\fBParameters\fP
.RS 4
\fIdev_id\fP Place holder to store the id of the device structure Can be used to store the index of the Chip select or I2C address of the device\&. 
.br
\fIreg_addr\fP Used to select the register the where data needs to be read from or written to\&. 
.br
\fI[in/out]\fP reg_data: Data array to read/write 
.br
\fIlen\fP Length of the data array 
.RE
.PP

.PP
Definition at line 354 of file bme680_defs\&.h\&.
.SS "typedef void(* bme680_delay_fptr_t) (uint32_t period)"
Delay function pointer 
.PP
\fBParameters\fP
.RS 4
\fIperiod\fP Time period in milliseconds 
.RE
.PP

.PP
Definition at line 360 of file bme680_defs\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBbme680_intf\fP"

.PP
Interface selection Enumerations\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIBME680_SPI_INTF \fP\fP
SPI interface 
.TP
\fB\fIBME680_I2C_INTF \fP\fP
I2C interface 
.PP
Definition at line 365 of file bme680_defs\&.h\&.
.SH "Function Documentation"
.PP 
.SS "void bme680_get_profile_dur (uint16_t * duration, const struct \fBbme680_dev\fP * dev)"

.PP
This API is used to get the profile duration of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&. 
.br
\fIduration\fP : Duration of the measurement in ms\&.
.RE
.PP
\fBReturns\fP
.RS 4
Nothing 
.RE
.PP

.PP
Definition at line 672 of file bme680\&.c\&.
.SS "int8_t bme680_get_regs (uint8_t reg_addr, uint8_t * reg_data, uint16_t len, struct \fBbme680_dev\fP * dev)"

.PP
This API reads the data from the given register address of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIreg_addr\fP : Register address from where the data to be read 
.br
\fIreg_data\fP : Pointer to data buffer to store the read data\&. 
.br
\fIlen\fP : No of bytes of data to be read\&. 
.br
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP
Definition at line 315 of file bme680\&.c\&.
.SS "int8_t bme680_get_sensor_data (struct \fBbme680_field_data\fP * data, struct \fBbme680_dev\fP * dev)"

.PP
This API reads the pressure, temperature and humidity and gas data from the sensor, compensates the data and store it in the bme680_data structure instance passed by the user\&. 
.PP
\fBParameters\fP
.RS 4
\fIdata\fP Structure instance to hold the data\&. 
.br
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP
Definition at line 705 of file bme680\&.c\&.
.SS "int8_t bme680_get_sensor_mode (struct \fBbme680_dev\fP * dev)"

.PP
This API is used to get the power mode of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP 
.RE
.PP
\fBNote\fP
.RS 4
: \fBbme680_dev\&.power_mode\fP structure variable hold the power mode\&.
.RE
.PP
value mode  0x00 BME680_SLEEP_MODE  0x01 BME680_FORCED_MODE  
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP
Definition at line 628 of file bme680\&.c\&.
.SS "int8_t bme680_get_sensor_settings (uint16_t desired_settings, struct \fBbme680_dev\fP * dev)"

.PP
This API is used to get the oversampling, filter and T,P,H, gas selection settings in the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&. 
.br
\fIdesired_settings\fP : Variable used to select the settings which are to be get from the sensor\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error\&. 
.RE
.PP

.PP
Definition at line 537 of file bme680\&.c\&.
.SS "int8_t bme680_init (struct \fBbme680_dev\fP * dev)"

.PP
This API is the entry point\&. It reads the chip-id and calibration data from the sensor\&. CPP guard
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP
Definition at line 287 of file bme680\&.c\&.
.SS "void bme680_set_profile_dur (uint16_t duration, struct \fBbme680_dev\fP * dev)"

.PP
This API is used to set the profile duration of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&. 
.br
\fIduration\fP : Duration of the measurement in ms\&.
.RE
.PP
\fBReturns\fP
.RS 4
Nothing 
.RE
.PP

.PP
Definition at line 647 of file bme680\&.c\&.
.SS "int8_t bme680_set_regs (const uint8_t * reg_addr, const uint8_t * reg_data, uint8_t len, struct \fBbme680_dev\fP * dev)"

.PP
This API writes the given data to the register address of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIreg_addr\fP : Register address from where the data to be written\&. 
.br
\fIreg_data\fP : Pointer to data buffer which is to be written in the sensor\&. 
.br
\fIlen\fP : No of bytes of data to write\&.\&. 
.br
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP
Definition at line 340 of file bme680\&.c\&.
.SS "int8_t bme680_set_sensor_mode (struct \fBbme680_dev\fP * dev)"

.PP
This API is used to set the power mode of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP 
.RE
.PP
\fBNote\fP
.RS 4
: Pass the value to \fBbme680_dev\&.power_mode\fP structure variable\&.
.RE
.PP
value mode  0x00 BME680_SLEEP_MODE  0x01 BME680_FORCED_MODE  
.PP
.IP "\(bu" 2
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error 
.RE
.PP

.PP

.PP
Definition at line 589 of file bme680\&.c\&.
.SS "int8_t bme680_set_sensor_settings (uint16_t desired_settings, struct \fBbme680_dev\fP * dev)"

.PP
This API is used to set the oversampling, filter and T,P,H, gas selection settings in the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&. 
.br
\fIdesired_settings\fP : Variable used to select the settings which are to be set in the sensor\&. 
.PP
.nf
Macros                    |  Functionality

.fi
.PP
 ---------------------------------|---------------------------------------------- BME680_OST_SEL | To set temperature oversampling\&. BME680_OSP_SEL | To set pressure oversampling\&. BME680_OSH_SEL | To set humidity oversampling\&. BME680_GAS_MEAS_SEL | To set gas measurement setting\&. BME680_FILTER_SEL | To set filter setting\&. BME680_HCNTRL_SEL | To set humidity control setting\&. BME680_RUN_GAS_SEL | To set run gas setting\&. BME680_NBCONV_SEL | To set NB conversion setting\&. BME680_GAS_SENSOR_SEL | To set all gas sensor related settings
.RE
.PP
\fBNote\fP
.RS 4
: Below are the macros to be used by the user for selecting the desired settings\&. User can do OR operation of these macros for configuring multiple settings\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error\&. 
.RE
.PP

.PP
Definition at line 413 of file bme680\&.c\&.
.SS "int8_t bme680_soft_reset (struct \fBbme680_dev\fP * dev)"

.PP
This API performs the soft reset of the sensor\&. 
.PP
\fBParameters\fP
.RS 4
\fIdev\fP : Structure instance of \fBbme680_dev\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
Result of API execution status 
.RE
.PP
\fBReturn values\fP
.RS 4
\fIzero\fP -> Success / +ve value -> Warning / -ve value -> Error\&. 
.RE
.PP

.PP
Definition at line 379 of file bme680\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lab10 from the source code\&.
